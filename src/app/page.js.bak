'use client'
import React, { useState, useEffect, useMemo } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar, Loader2, MapPin, Users } from 'lucide-react';

const TEAM_CONFIG = [
  { sex: 'Boys', age: 'Bantam', team: 'AA', icalUrl: 'webcal://www.fargohockey.org/ical_feed?tags=8551014', rosterUrl: 'https://www.fargohockey.org/roster/show/8551014' },
  { sex: 'Boys', age: 'Bantam', team: 'A', icalUrl: 'webcal://www.fargohockey.org/ical_feed?tags=8551013', rosterUrl: 'https://www.fargohockey.org/roster/show/8551013' },
  { sex: 'Boys', age: 'Bantam', team: 'B1 Gray', icalUrl: 'webcal://www.fargohockey.org/ical_feed?tags=8551019', rosterUrl: 'https://www.fargohockey.org/roster/show/8551019' },
  { sex: 'Boys', age: 'Bantam', team: 'B1 Navy', icalUrl: 'webcal://www.fargohockey.org/ical_feed?tags=8551020', rosterUrl: 'https://www.fargohockey.org/roster/show/8551020' },
  { sex: 'Boys', age: 'Peewee', team: 'AA', icalUrl: 'webcal://www.fargohockey.org/ical_feed?tags=8551060', rosterUrl: 'https://www.fargohockey.org/roster/show/8551060' },
  { sex: 'Boys', age: 'Peewee', team: 'A', icalUrl: 'webcal://www.fargohockey.org/ical_feed?tags=8551058', rosterUrl: 'https://www.fargohockey.org/roster/show/8551058' },
  { sex: 'Boys', age: 'Peewee', team: 'B1 Gray', icalUrl: 'webcal://www.fargohockey.org/ical_feed?tags=8551066', rosterUrl: 'https://www.fargohockey.org/roster/show/8551066' },
  { sex: 'Boys', age: 'Peewee', team: 'B1 Navy', icalUrl: 'webcal://www.fargohockey.org/ical_feed?tags=8551067', rosterUrl: 'https://www.fargohockey.org/roster/show/8551067' }
];

const EventRow = ({ event, rosterUrl }) => (
  <tr className="border-b border-gray-200 last:border-0 hover:bg-gray-50 transition-colors">
    <td className="py-4 px-6">
      {rosterUrl ? (
        <a 
          href={rosterUrl} 
          target="_blank" 
          rel="noopener noreferrer" 
          className="inline-flex items-center gap-1.5 text-blue-600 font-medium hover:text-blue-700"
        >
          {event.team}
          <Users className="h-4 w-4 opacity-75" />
        </a>
      ) : (
        <span className="font-medium">{event.team}</span>
      )}
    </td>
    <td className="py-4 px-6 font-medium">{event.opponent || event.summary}</td>
    <td className="py-4 px-6 text-gray-600">{event.time}</td>
    <td className="py-4 px-6 text-gray-600">
      <div className="inline-flex items-center gap-1.5">
        <MapPin className="h-4 w-4 text-gray-400" />
        <span>{event.location}</span>
      </div>
    </td>
  </tr>
);

async function fetchEvents() {
  try {
    const response = await fetch('http://localhost:3001/api/events');
    if (!response.ok) {
      throw new Error('Failed to fetch events');
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching events:', error);
    return [];
  }
}

function formatEventDate(dateString) {
  const [year, month, day] = dateString.split('-');
  const date = new Date(year, month - 1, day);
  
  return date.toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

export default function Home() {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    sex: 'All',
    age: 'All',
    team: 'All',
    location: 'All'
  });

  useEffect(() => {
    async function loadEvents() {
      setLoading(true);
      try {
        const data = await fetchEvents();
        setEvents(data);
      } catch (error) {
        console.error('Error loading events:', error);
      } finally {
        setLoading(false);
      }
    }

    loadEvents();
  }, []);

  const filterOptions = useMemo(() => {
    const locations = new Set(events.filter(e => e.location).map(e => e.location));
    return {
      sex: ['All', ...new Set(TEAM_CONFIG.map(team => team.sex))],
      age: ['All', ...new Set(TEAM_CONFIG.map(team => team.age))],
      team: ['All', ...new Set(TEAM_CONFIG.map(team => team.team))],
      location: ['All', ...Array.from(locations).sort()]
    };
  }, [events]);

  const filteredEvents = useMemo(() => {
    return events.filter(event => {
      const matchSex = filters.sex === 'All' || event.sex === filters.sex;
      const matchAge = filters.age === 'All' || event.age === filters.age;
      const matchTeam = filters.team === 'All' || event.team.includes(filters.team);
      const matchLocation = filters.location === 'All' || event.location === filters.location;
      
      return matchSex && matchAge && matchTeam && matchLocation;
    });
  }, [events, filters]);

  const groupedEvents = useMemo(() => {
    return filteredEvents.reduce((acc, event) => {
      const date = event.date;
      if (!acc[date]) acc[date] = [];
      acc[date].push(event);
      return acc;
    }, {});
  }, [filteredEvents]);

  const handleFilterChange = (filterType, value) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: value
    }));
  };

  const getRosterUrl = (teamName) => {
    const teamConfig = TEAM_CONFIG.find(config => 
      `${config.age} ${config.team}` === teamName
    );
    return teamConfig?.rosterUrl;
  };

  return (
    <main className="min-h-screen bg-gradient-to-b from-blue-50 to-gray-100">
      <div className="max-w-[1400px] mx-auto p-6 md:p-12 space-y-8">
        {/* Header */}
        <div className="flex flex-col gap-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
          <div className="flex items-center gap-4">
            <Calendar className="h-10 w-10 text-blue-500" />
            <h1 className="text-3xl font-bold tracking-tight text-gray-800">Fargo Freeze Hockey Schedule</h1>
          </div>
          <div className="flex flex-wrap gap-4">
            {Object.entries(filterOptions).map(([filterType, options]) => (
              <Select 
                key={filterType}
                value={filters[filterType]}
                onValueChange={(value) => handleFilterChange(filterType, value)}
              >
                <SelectTrigger className="bg-white border border-gray-300 rounded-md px-4 py-2 shadow-sm">
                  <SelectValue placeholder={filterType.charAt(0).toUpperCase() + filterType.slice(1)} />
                </SelectTrigger>
                <SelectContent>
                  {options.map(option => (
                    <SelectItem 
                      key={option}
                      value={option}
                    >
                      {option}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            ))}
          </div>
        </div>

        {/* Content */}
        {loading ? (
          <div className="flex justify-center items-center p-16">
            <Loader2 className="h-10 w-10 animate-spin text-blue-500" />
          </div>
        ) : (
          <div className="space-y-8">
            {Object.entries(groupedEvents).map(([date, dayEvents]) => (
              <div key={date} className="bg-white rounded-2xl shadow-md border border-gray-200 overflow-hidden">
                <div className="px-8 py-6 bg-blue-50 border-b border-gray-200">
                  <h2 className="text-xl font-semibold text-gray-800">
                    {formatEventDate(date)}
                  </h2>
                </div>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b border-gray-200 bg-gray-100">
                        <th className="py-4 px-8 text-left text-sm font-bold text-gray-700">Team</th>
                        <th className="py-4 px-8 text-left text-sm font-bold text-gray-700">Event</th>
                        <th className="py-4 px-8 text-left text-sm font-bold text-gray-700">Time</th>
                        <th className="py-4 px-8 text-left text-sm font-bold text-gray-700">Location</th>
                      </tr>
                    </thead>
                    <tbody>
                      {dayEvents.map((event, index) => (
                        <EventRow 
                          key={`event_${event.id}_${index}`}  // Updated key to make it unique
                          event={event} 
                          rosterUrl={getRosterUrl(event.team)} 
                        />
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            ))}
            {Object.keys(groupedEvents).length === 0 && (
              <div className="text-center p-16 bg-white rounded-2xl shadow-md border border-gray-200">
                <p className="text-gray-500 text-lg">No events found matching the selected filters</p>
              </div>
            )}
          </div>
        )}
      </div>
    </main>
  );
}
